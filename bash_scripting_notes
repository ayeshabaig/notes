BASH Scripting Notes

.bash_profile
only works when you login
.bashrc loaded when a new tab is opened

# .bash_profile

# Get the aliases and functions
if [ .f ~/.bashrc ]; then
	. ~/.bashrc
fi

# User specific environment and startup programs

PATH=$PATH:HOME/bin

export PATH

__________


# .bashr

# User specified aliases and functions

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Source the global definition
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

---------

env | grep HISTCONTROL
HISTCONTROL=ignoredups - doesn't write duplicate commands to bash_history
export HISTCONTROL=$HISTCONTROL:ignorespace - when you run a command with a
	space in front, it won't be captured in bash_history

.bash_logout - called whenever a bash session is ended
- can be used to reset the .bash_profile and .bashrc files to original

pwd
whoami

bash script - opens a new shell and executes file
-----
#!/bin/bash - runs script in new shell

clear

echo "Hello World"
----

.sh is not necessary, but useful

need to chmod to make executable
chmod u+x test.sh

vim env.sh

-----
#!/bin/bash

clear

echo "This script will give us environment information"
echo "================================================"
echo "Hello Username: $USER"
echo ""
echo "Your home directory is: $HOME"
echo ""
echo "Your History File will ignore: $HISTCONTROL"
echo ""
echo "Your Terminal Session Type is: $TERM"
echo ""
-----

make a var in env that is first name
FIRSTNAME="Brian"
no spaces
export FIRSTNAME - make available to env
env | grep FIRSTNAME
export FIRSTNAME="Dave" - overwrites variable
export TODAYSDATE=`date` - set var to output of command `date`

varexample.sh
----
#!/bin/bash

MYUSERNAME="username"
MYPASSWORD="password123"
STARTOFSCRIP= `date`

echo "My login name for this application is: $MYUSERNAME"
echo "My login password for this application is: $MYPASSWORD"
echo "I started this script at: $STARTOFSCRIPT"

ENDOFSCRIPT=`date`

echo "I ended this script at: $ENDOFSCRIPT"
----

#!/bin/bash
# This line is intended to be used as a general description
# of the script and anything is does

clear # clears the screen

MYUSERNAME="Brian" # the username for this application

echo "We are using the default user called: $MYUSERNAME" # display to the console

DATETIMESTAMP=`date`

echo "This is when the script was run: $DATETIMESTAMP" # this is the timestamp of run
----
substitution.sh
----
#!/bin/bash
# This script is intended to show how to do simple substitution

shopt -s expand_aliases
alias TODAY="date"
alias UFILES="find /home -user user"

TODAYSDATE=`date`
USERFILES=`find /home -user user`

echo "Today's Date: $TODAYSDATE"
echo "All Files Owned by USER: $USERFILES"

A=`TODAY`
B=`UFILES`

echo "With Alias, TODAY is: $A"
echo "With Alias, UFILES is: $B"

----
errors.sh
----
#!/bin/bash
# this is to show exit status types
set -e # exits script as soon as an error is encountered

expr 1 + 5
echo $?

rm doodles.sh
echo $?

expr 10 + 10
echo $?
----

expr 2 + 2 -> needs spaces around numbers
expr 10 \* 8  -> need to escape *
expr \( 2 + 2 \) \* 4 -> need to escape parens as well

----
expressions.sh
----
#!/bin/bash
# expression evaluation

expr 2 + 2

expr 2 + 2 \* 4

expr \( 2 + 2 \) \* 4
----

all vars on system
man printenv
printenv | more
env and print_env almost the same output
set - env variables specific to this session
----

quoting chars
echo "\$COL" -> $COL
echo '$COL' -> $COL - literally prints everything in quotes, no substitution
escape single char, use \
echo whole string use ' '
echo "Today's date is: `date`"
` backtick - substitute command in a string

/dev/null is the blackhole of the the computer
anything written to this device, file, or folder (depending on view) will be ignored

----
null.sh
----
#!/bin/bash
# redirect to /dev/null example

echo "This is displaying on the console"

echo "This is going into the black hole" >> /dev/null
----

appending (>>) is preferred to overwriting (>), but both work

----
readsample.sh
----
#!/bin/bash
# interactive script for user input

echo "Enter Your First Name: "
read FIRSTNAME
echo "Enter Your Last Name: "
read LASTNAME

echo ""
echo "Your full name is: $FIRSTNAME $LASTNAME"
echo ""
echo "Enter Your Age: "
read USERAGE

echo "In 10 years, You will be `expr $USERAGE + 10` years old."
----

Shell Expansion
echo sh{ot, ort, oot}
shot short shoot
echo st{il, al}l
still stall
echo "${!HO*}" -> echos out env vars starting with HO
HOST HOSTNAME HOSTTYPE
echo "${VARNAME:=valuesomething}" -> set a var and echo it out
echo "$[ 2 * 2 ]" -> 4 -> echos out result of expr in square brackets

variables implicitly declared (loose typing)
MYVAR = 5 -> implicitly determines MYVAR to be a number
declare can set, unset, display type
declare -p MYVAR -> displays value and type of MYVAR
declare -i NEWVAR=10 -> declares as an int
declare +i NEWVAR -> takes away declaration
declare -r READONLY="This is a string we cannot overwrite" -> declares as read-only
readonly MYREADONLY="This string" -> also declares readonly
----
Arrays
MYARRAY=("First", "Second", "Third")
echo MYARRAY -> First -> just shows first item
echo ${MYARRAY[1]} -> Second -> right way to echo by index
echo ${MYARRAY[10]} -> returns nothing
echo ${MYARRAY[*]} -> returns everything in array
MYARRAY[3]="Fourth" -> assigns "Fourth" to index 3
array elements are space delimited, not comma delimited
NEWARRAY=("First","Second","Third")
echo NEWARRAY -> First,Second,Third -> They all got assigned to first index bc no space
----
arrayex.sh
----
#!/bin/bash
# simple array list and loop display

SERVERLIST=("websrv01" "websrv02" "websrv03" "websrv04")
COUNT=0

for INDEX in ${SERVERLIST[@]}; do
  echo "Processing Server: ${SERVERLIST[COUNT]}"
  COUNT="`expr $COUNT + 1`"
done
---

cmdlinvar.sh
----
#!/bin/bash
# demo of command line values passed in with our shell script

echo "The following item was passed in to the script at run time $1"
---
$ cmdlinvar.sh "Hello Script"
returns The following item was passed in to the script at run time Hello Script
----
#!/bin/bash

USERNAME=$1
PASSWORD=$2

echo "The username is $USERNAME and the password is $PASSWORD"
----
each argument given on command line when running script is assigned
to sequential variables in the script - $1 $2 $3 etc

If Statement
simpleif.sh
----
#!/bin/bash
# simple if script for guessing a number

echo "Guess the Secret Number"
echo "======================="
echo ""
echo "Enter a Number Between 1 and 5: "
read GUESS

if [ $GUESS -eq 3 ]
  then
    echo "You Guessed the Correct Number"
fi
----
testfile.sh
----
#!/bin/bash
# tests for the existence of indicated file name

FILENAME=$1
echo "Testing for the Existence of a File called $FILENAME"

if [ ! -a $FILENAME ] # ! tests negative -a matches on filenames
  then
    echo "File $FILENAME Does Not Exist!"
fi
----

ifexpr.sh
----
#!/bin/bash
# test multiple expressions in single if statement

FILENAME=$1

echo "Testing for file $FILENAME and readability"

if [ -f $FILENAME ] && [ -r $FILENAME ]
  then
    echo "File $FILENAME exists AND is readable"
fi
----

If/then/else
ifthenelse.sh
----
#!/bin/bash
# simple example of if then else and nested if statements

echo "Enter a number between 1 and 3:"
read VALUE

if [ "$VALUE" -eq "1" ] # make sure to put values in double quotes
  then
    echo "You entered $VALUE"
fi
----
modify script to check more values
----
#!/bin/bash
# simple example of if then else and nested if statements

echo "Enter a value between 1 and 3:"
read VALUE

if [ "$VALUE" -eq "1" ] 2>/dev/null || [ "$VALUE" -eq "2" ] 2>/dev/null || [ "$VALUE" -eq "3] 2>/dev/null ; then
  echo "You entered $VALUE
else
  echo "You didn't follow instructions!"
fi
----
2>/dev/null - send error output (2) to /dev/null
console output is 1
----
#!/bin/bash
# simple example of if then else and nested if statements

echo "Enter a value between 1 and 3:"
read VALUE

if [ "$VALUE" -eq "1" ] 2>/dev/null; then
  echo "You entered #1"
elif [ "$VALUE" -eq "2" ] 2>/dev/null; then
  echo "You entered #2"
elif [ "$VALUE" -eq "3] 2>/dev/null; then
  echo "You entered #3"
else
  echo "You didn't follow instructions!"
fi
----
forsample.sh
----
#!/bin/bash
# this is a demo of a for loop

echo "List all the shell scripts contents of the directory"

SHELLSCRIPTS=`ls *.sh`

for SCRIPT in "$SHELLSCRIPTS"; do
  DISPLAY="`cat $SCRIPT`"
  echo "File: $SCRIPT - Contents $DISPLAY"
done
----

casesample.sh
----
#!/bin/bash
# demo fo the case statement

clear

echo "MAIN MENU"
echo "========="
echo "1) Choice One"
echo "2) Choice Two"
echo "3) Choice Three"
echo ""
echo echo "Enter Choice: "
read MENUCHOICE

case $MENUCHOICE in
  1)
    echo "Congratulations for Choosing the First Option";;
  2)
    echo "Choice 2 Chosen";;
  3)
    echo "Last Choice Made";;
  *)
    echo "You chose unwisely";;
esac
----
end statements in case statement with ;;
*) is default case

----
whilesample.sh
----
#!/bin/bash
# while loop sample

echo "Enter the number of times to display the 'Hello World' message"
read DISPLAYNUMBER

COUNT=1

while [ $COUNT -le $DISPLAYNUMBER ]
do
  echo "Hello World - $COUNT"
  COUNT="`expr $COUNT + 1`"
done
----

rm superduper 2> /dev/null && echo "File exists and was removed" || echo "File does not exist and cannot be deleted"
delete superduper - send errors to /dev/null - if successful echo file exists message - else file doesnt exist message

----
exops.sh
----
#!/bin/bash
# execution operators example

echo "Enter a number between 1 and 5: "
read VALUE

if [ "$VALUE" -eq "1" ] || [ "$VALUE" -eq "3 ] || [ "$VALUE" -eq "5" ]; then
  echo "You entered the ODD value of $VALUE"
else
  echo "You entered a value of $VALUE"
fi
----

vim superheroes.txt
Batman
Superman
Wonder Woman
Flash
Green Lantern
Hawkman

readfile.sh
---
#!/bin/bash
# simple file reading (non-binary) and displaying one line at a time

echo "Enter a filename to read: "
read FILE

while read -r SUPERHERO; do
  echo "Superhero Name: $SUPERHERO"
done < "$FILE"

file descriptors 
0 - standard input
1 - standard output
2 - standard error
pick a number greater than or equal to 3 for a file descriptor in a script

filedesc.sh
---
#!/bin/bash
# demo

echo "Enter a file name to read: "
read FILE

exec 5<>$FILE # 5 is file descriptor >=3; 5 is arbitrary; < is read-only; > is write-only; <> is both; 

while read -r SUPERHERO; do # `read -r` means read a file one line at a time
  echo "Superhero Name: $SUPERHERO"
done <&5  # reference to file descriptor is passed in

echo "File Was Read On: `date`" >&5 # write out using file descriptor

exec 5>&-  # closes file descriptor; not necessary but best practice to not fill up available file descriptor slots
---

delimited files
IFS - internal field separator
echo $IFS
cat spacedelim.txt
i7 4Gz 32gb 4TB

vim ifsdelim.sh
---
#!/bin/bash
# delimiter example using IFS

echo "Enter filename to parse: "
read FILE

echo "Enter the delimiter: "
read DELIM

IFS="$DELIM"

while read -r CPU MEMORY DISK; do
  echo "CPU: $CPU"
  echo "Memory: $MEMORY"
  echo "Disk: $DISK"
done <"$FILE"
---
this script takes a file as input and splits it up base on the delimiter provided

---
trap - allows to look for an event and act based on it
vim trapex.sh
---
#!/bin/bash
# example of trapping events and limiting the shell stopping

clear

trap 'echo " - Please Press Q to Exit..."' SIGINT SIGTSTP SIGTERM 
	# trap takes 2 args, first is what to do in single quotes, 
	# second is what signals to trap

while [ "$CHOICE" != "Q" ] && [ "$CHOICE != "q" ]; do
  echo "MAIN MENU"
  echo "========="
  echo "1) Choice One"
  echo "2) Choice Two"
  echo "3) Choice Three"
  echo "Q) Quit/Exit"
  echo ""
  read CHOICE

  clear
done

---
SIGINT - ctrl-c
SIGTERM - 
SIGTSTP - ctrl-z

Debugging Scripts
set debugging for entire script
bash -x env.sh
gives info while script is running

to debug part of a script
use set -x at start and set +x at finish
----
#!/bin/bash
# simple file reading (non-binary) and displaying one line at a time

echo "Enter a filename to read: "

# DEBUG START
set -x

read FILE

while read -r SUPERHERO; do
  echo "Superhero Name: $SUPERHERO"
done < "$FILE"

set +x
# STOPS DEBUG
----
set -f stops wildcards

vim errorexit.sh
----
#!/bin/bash
# demo of using error handling with exit

echo "Change to a directory and list the contents"
DIRECTORY=$1 

cd $DIRECTORY 2>/dev/null   # redirect std error output to /dev/null
if [ "$?" = "0" ]; then     # $? is exit status of last command
  echo "We can change into the directory $DIRECTORY, and here are the contents"
  echo "`ls -al`"
else
  echo "Cannot change directories, exiting with an error and no listing"
  exit 1
fi


Simple Functions
simplefunc.sh
----
#!/bin/bash
# this is a simple function example

# function cannot be empty or just contain a comment, can contain : which is short for null

echo "Starting function definition"
funcExample () {
  echo "We are now in the function..."
} 
# single line function needs to end command with semicolon

anotherFuncExample () { echo "we are in another function...'; }

funcExample  # have to call the function after defining it

vim funstructure.sh
----
#!/bin/bash
# demo of functions within a shell script structure

# script or global variables
CMDLINE=$1

# function definitions - start

# displays a message
funcExample () {
  echo "This is an example"
}

# displays another message
funcExample2 () {
  echo "This is another example"
}

# function definitions - end

# beginning of the script
echo "This is the start..."

funcExample2    # function must be defined before it is called
funcExample
----

vim varscope.sh
----
#!/bin/bash
# demonstrating variable scope

# global variable declaration
GLOBALVAR="Globally visible"

# function definitions - start

# sample function for function variable scope
funcExample () {
  # local variable to the function
  LOCALVAR="Locally Visible"
 
  echo "From within the function, the variable is $LOCALVAR..."
}

# function definitions - stop

# script - start
clear

echo "This step happens first..."
echo ""
echo "GLOBAL variable = $GLOBALVAR (before the function call)"
echo "LOCALVAR variable = $LOCALVAR (before the function call)"
echo ""
echo "Calling Function - funcExample()"
echo ""

funcExample

echo ""
echo "Function has been called..."
echo ""
echo "GLOBAL variable = $GLOBALVAR (after the function call)"
echo "LOCAL variable = $LOCALVAR (after the function call)"
----

vim funcparams.sh
----
#!/bin/bash
# this demo is for functional parameter passing

#global variable
USERNAME=$1

# function definitions - start

funcAgeInDays () {
  echo "Hello $USERNAME, You are $1 Years Old."
  echo "That makes you approximately `expr $1 \* 365` days old..."
}

# function definitions - stop

# script - start
clear

echo "Enter Your Age: "
read USERAGE

# calculate the number of days
funcAgeInDays $USERAGE
----

Nested Functions
define a function with one of more functions inside of it

vim nested.sh
----
#!/bin/bash
# demo of nested functions and some abstraction

# global variable
GENDER=$1

# create a human being
funcHuman () {
  ARMS=2
  LEGS=2

  echo "A Human has $ARMS arms and $LEGS legs - but what gender are we?"
  echo ""

  funcMale () {
    BEARD=1

    echo 'This man has $ARMS arms and $LEGS legs, with $BEARD beard(s)..."
    echo ""
  }

  funcFemale () {
    BEARD=0

    echo "This woman has $ARMS arms and $LEGS legs, with $BEARD beard(s)..."
    echo ""
  }
}

# function definitions - stop

# script - start
clear
echo "Determining the characteristics of the gender $GENDER"
echo ""

# determine the actual gender and display the characteristics
if [ "$GENDER" == "male" ]; then
  funcHuman
  funcMale
else 
  funcHuman
  funcFemale
fi
----

vim returnval.sh
----
#!/bin/bash 
# demo of return values and testing results

# global variable
YES=0
NO=1
FIRST=$1
SECOND=$2
THIRD=$3

# function definitions - start

# check the command line parameters passed in
funcCheckParms () {
  # did we get three 
  if [ ! -z "$THIRD" ]; then
    echo "We got three parms..."
    return $YES
  else 
    echo "We did not get three parms..."
    return $NO
  fi
}

# function definitions - stop

# script - start
funcCheckParms
RETURN_VALS=$?

# did we get three or not?
if [ "$RETURN_VALS" -eq "$YES" ]; then
  echo "We received three parms and they are: "
  echo "Parm 1: $FIRST"
  echo "Parm 2: $SECOND"
  echo "Parm 3: $THIRD"
  echo ""
else
  echo "Usage: returnval.sh [parm1] [parm2] parm3]"
  exit 1
fi

InfoBox
method of popping up an n-curses?
yum install dialog
vim simpleinfobox.sh
----
#!/bin/bash
# demo of a simple info box with dialog and ncurses

# global variables / default values
INFOBOX=${INFOBOX=dialog}
TITLE="Default"
MESSAGE="Something to say"
XCOORD=10
YCOORD=20

# function declarations - start

# display the infobox and our message
funcDisplayInfoBox () {
  $INFOBOX --title "$1" --infobox "$2" "$3" "$4"
  sleep "$5"
}

# function declarations - stop

# script - start

if [ "$1" == "shutdown" ]; then
  funcDisplayInfoBox "WARNING!" "We are SHUTTING DOWN the System..." "11" "21" "5"
  echo "Shutting Down!"
else
  functionDispalyInfoBox "Information..." "You are not doing anything fun..." "11" "22" "5"
  echo "Not doing anything..."
fi

# script - stop
----

MessagBox for Confirmation
man dialog
vim simpleMessageBox.sh
----
#!/bin/bash
# demo of a message box with an OK button

#global variables / default variables
MSGBOX=${MSGBOX=dialog}
TITLE="Default"
MESSAGE="Some Message"
XCOORD=10
YCOORD=20

#function declarations - start

# display the message box with our message
funcDisplayMsgBox () {
  $MSGBOX --title "$1" --msgbox "$2" "$3" "$4"
}

# function declarations - stop

# script - start
if [ "$1" == "shutdown" ]; then
  funcDisplayMsgBox "WARNING!" "Please press OK when you are ready to shut down the system" "10" "20"
  echo "SHUTTING DOWN NOW!!!"
else
  funcDisplayMsgBox "Boring..." "You are not asking for anything fun..." "10" "20"
  echo "Not doing anything, back to regular scripting..."
fi

# script - stop
----

vim simple dialog.sh
----
#!/bin/bash
# demo of a dialog box that display a menu

# global variables / default values
MENUBOX=${MENUBOX=dialog}

# function declarations - start

# function to display a simple menu
funcDisplayDialogMenu () {
  $MENUBOX --title "[ M A I N   M E N U ]" --menu "Use UP/DOWN Arrows to Move and Select the Number of Your Choice and Enter" 15 45 4 1 "Display Hello World" 2 "Display Goodbye World" 3 "Display Nothing" X "Exit" 2>choice.txt
}
# 15=xcoord 45=ycoord 4=number of options 1=name of first option 
# 2>choice.txt redirect std error to file to capture user input

# function declarations - stop

# script - start

funcDisplayDialogMenu

case "`cat choice.txt`" in
  1) echo "Hello World";;
  2) echo "Goodbye World";;
  3) echo "Nothing";;
  X) echo "Exit";;
esac

# script - stop
----

InputBox
vim simpleinputbox.sh
----
#!/bin/bash
# simple demo of an input dialog box

# global variables / default values
INPUTBOX=${INPUTBOX=dialog}
TITLE="Default"
MESSAGE="Something to display"
XCOORD=10
YCOORD=20

# function declarations - start

# display the input box
funcDisplayInputBox () {
  $INPUTBOX --title "$1" --inputbox "$2" "$3" "$4" 2>tmpfile.txt
}

# function declarations - stop

# script - start

funcDisplayInputBox "Display File Name" "Which file in the current directory do you want to display?" "10" "20"

if [ "`cat tmpfile.txt`" != "" ]; then
  cat "`cat tmpfile.txt`"
else
  echo "Nothing to do"
fi

# script - stop
----

Overriding Events
vim overriding.sh
----
#!/bin/bash
# override/trap the system exit and execute a custom function

# global variables
TMPFILE="tmpfile.txt"
TMPFILE2="tmpfile2.txt"

trap 'funcMyExit' EXIT

# function declarations - start

# run this exit instead of the default exit when called
funcMyExit () {
  echo "Exit Intercepted..."
  echo "Cleaning up the temp files..."
  rm -rf tmpfil*.txt
  exit 255
}

# function declarations - stop

# script - start

echo "Write something to tmp file for later use..." > $TMPFILE
echo "Write something to tmp file 2 for later use..." > $TMPFILE2

echo "Trying to copy the indicated file before processing..."
cp -rf $1 newfile.txt 2>/dev/null

if [ "$?" -eq "0" ]; then
  echo "Everything worked out ok..."
else
  echo "I guess it did not work out ok..."
  exit 1
fi

# script - stop
----
