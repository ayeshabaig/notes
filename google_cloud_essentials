Google Cloud Essentials

Interactive Diagram https://linuxacademy.com/cp/guides/download/refsheets/guides/refsheets/google-essentials_1529985391.html

App Engine Fundamentals
PaaS - Platform as a Service
No server setup or provisioning with minimal management required
Automatic scaling and load-balancing
Great for websites, mobile apps, and line of business apps
Standard Environment         Flexible Environment
  Earliest implementation      Recently Introduced
  More proprietary             Standardized on Docker
  Limited languages and access Broader language/version use
  Faster instance spin up      slower instance spin up
  Less expensive               more expensive

Compute Engine Fundamentals
IaaS - Infrastructure as a Service
Scalable, high-performance virtual machines (VMs)
Numerous configurations, completely customizable
Run public disk images or private images
Various storage options
Optionally, works with containers
Virtual Private Network (VPC) support
Default and custom firewalls
Complete routing support

Kubernetes Engine Fundamentals
Managed, orchestrated environment for containerized applications
Uses Compute Engine to form cluster
Relies on open source Kubernetes cluster management system
Currently only Docker containers are supported
Benefits
  Load-balancing integrated
  Node pools supported
  Automatic cluster and node scaling
  Automatic upgrades
  Automatic repair based on health reports
  Automatic logging and monitoring with Stackdriver

Cloud Functions Fundamentals
Serverless Environment for executing code and connecting cloud services
Fully managed zero infrastructure or management requirements
JavaScript functions in a Node.js wrapper
Triggers:
  HTTP request
  Cloud Storage
  Pub/Sub Event
Use cases:
  Webhooks - Respond to any HTTP request
  Data & Image Processing - Validate/transform data or manipulate images
  Mobile Back end - React to storage, authentication or data events
  Internet of Things - Respond to Pub/Sub messages from devices

Cloud Identity Fundamentals
  Identity as a Service - IDaaS
  Originally G-Suite based with separate Google Admin
  Intergrated with Google Cloud
  Manage resources hierarchically
  Assign unmanaged accounts to project
  Allow single sign-on
  Hierarchy- Organization->Folders->1 or more Projects->1 or more Resources per project
  Policy inheritance
 
Cloud IAM Fundamentals
  Unified resource access managemenet system
  For both users and services
  3 main components: policies, roles, resources
  Policy: Who can do what on which resources
  Roles: List of permissions assigned to identities/members
  Identities:
    Google account(managed account), unmanaged account
    Service account
    Google Group, G-Suite Domain, Cloud Identity Domain
  Resources:
    Projects and folders
    Cloud services(Compute Engine, Cloud Storage, Pub/Sub, etc)
    Aspects of those services(instances, buckets, topics, etc.)

Cloud KMS
  Cryptographic key management system
  Keys are used to encrypt/decrypt files
  Hierarchical, like IAM
    Project>Location>Key Ring>Key>Key Version
  Cloud KMS is a project-based resource
  Specify locations:
    Regional, Multi-Regional, or Global
  Key ring is a collection of keys in a specified location for a specific project
  Individual keys inherit permissions from keyring
  Different key versions have different encryption/decryption values
  Key version states: Enabled, Disabled, Scheduled for Destruction, Destroyed
  Key versions can be rotated regularly and automatically or manually

Cloud IAP
  Application-level authorization service
  Based on internal Google enterprise security model, BeyondCorp
  Supplements network-level firewalls
  Ideal for line of business apps
  No VPN needed:
    Straight-forward implementation for administrators
    Simple to use for remote workers
  No additional charge

---

Cloud Storage Fundamentals
  Binary large object(BLOB) storage
  Images, videos, audio files, documents, static webistes, etc.
  Automatic data encryption at rest and decryption on delivery
  Primary container: buckets
    Project-based
    Globally unique ID
    Specific location
    Set class for optimum price/performance
      Multi-regional - highes availability, most frequently accessed
      Regional - routinely accessed, best for analytics
      Nearline - infrequently accessed, used for archival and data backup
      Coldline - least accessed, lowest cost, typically for disaster recovery

Cloud Datastor Fundamentals
  NoSQL document database for semi-structured data
  Key Features:
    ACID transactions
    Highly available and scalable
    Multiple access options, i.e. Console, JSON API, and open source clients
    SQL-like language, GQL
  Structure - similar to traditional, but more flexible (schemaless):
    Kinds - like tables
    Entity - like row, but can have different properties
    Property - like field, but can multiple properties possible
    Key - like primary index
    Supports optional ancestors and children
  Uses: product catalogs, user profiles, ACID transactions, etc.

Cloud SQL Fundamentals
  Fully managed relational database service
  Supports PostgresSQL 9.6
  Supports MySQL 5.5(1st generation) and 5.6 or 5.7(2nd generation)
  Robust scalability
  Automatic replication and backup
  Highly configurable SQL instances
  Data automatically encrypted
  Default firewalls for each instance
  Full integration with Google Cloud services

Cloud Bigtable Fundamentals
  Fully managed, massively scalable NoSQL database service for big data
  Used for Gmail, Google Search, Maps & Analytics as well as eBay and Spotify
  Although also NoSQL, different from Cloud Datastore
    Wide column database vs document database
    No SQL-like language available
    Single key per row
  Capable of holding hundreds of petabytes of information
  Columns wide enough for entire web pages or satellite imagery
  Consistent low latency and high throughput
  Dynamically change cluster size without stopping and restarting
  Use cases: graph data, financial data, IoT data, marketing data, etc.

Open a Google Cloud Shell instance to use bigtable
gcloud components update
sudo gcloud components install cbt
echo project = laca-international > ~/.cbtrc
echo instance - laca-international-cbt >> ~/.cbtrc
cbt createtable laca-table
cbt ls
cbt createfamily laca-table cf1
cbt set laca-table r1 cf1:c1=laca-int-airport
cbt read laca-table

Cloud Spanner Fundamentals
  Fully managed, enterprise-grade, relational database service
  Is to Cloud SQL as Cloud Bigtable is to Cloud Datastore
  Scales horizontally like NoSQL databases
  High availability(99.999% uptime) with strong consistency
  Industry standard SQL support
  Supports data definition language(DDL)
  Client libraries: C#, Go, Java, Node,js, PHP, Python, and Ruby
  Full console support
  Use cases: call centers, financial trading, telecom, transportation, etc.

Cloud MemoryStore Fundamentals
  Fully managed, in-memory datastore service
  Recently released
  Redis protocol compatible
  Extrememly low latency: sub-millisecond
  As-needed scaling, up to 300 GB instance
  Connect with App Engine, Compute Engine, and Kubernetes Engine
  Service tiers:
    Basic - default, for basic caching
    Standard - for highly available Redis instance
  Use cases: caching layer in gaming and analytical pipelines, stream processing

Cloud BigQuery Fundamentals
  Fully managed data warehouse for big data
  Near real-time interactive analysis of massive datasets
  Analyze terabytes of data in seconds
  Standard SQL supported
  Storage and computing handled and billed separately
  Query public or commercial dataset with your own
  External services queries: Cloud Storage, Cloud Bigtable & Google Drive
  Automatic data replication
  Modify data with Data Definition Language
  Use cases: real-time inventory, predictive digital marketing, analytic events

Cloud Datafow Fundamentals
  Fully managed service for creating pipelines to process data
  Based on Apache Beam
  Processes data on multiple machines in parallel
  Handles both streaming (live) and batch (archived) data
  No instances or clusters to establish: serverless
  Easy replication of services with templates:
    No need to recompile code before processing pipeline
    Execute pipeline without dev environment and its dependencies
    Can customize exection with template parameters
    Can be executed via the console or gcloud command
  Best option if no current implementation with Apache Hadoop or Spark
  Use cases: analytical dashboards, forecasting sales trends, ELT operations

Cloud Datapro Fundamentals 
  Fully managed cluster data processing service
  Compatible with Apache Hadoop, Spark, and Hive
  Move existing projects or pipelines without redevelopment
  Boasts fast cluster creation - 90 seconds vs. 5 - 30 minutes
  Can scale clusters up and down without stopping the job
  Can switch to different versions of Hadoop, Spark, and others
  Workflow templates recently added
    Create template, add job, and instantiate template
      Workflow 1: Creates cluster, runs jobs, and deletes cluster
      Workflow 2: Works with exisiting cluster and runs jobs
  Similar to Cloud Dataflow
    Both process data
    Both handle batch and streaming data

How to choose between Cloud Dataflow and Cloud Dataproc
  Do you have dependencies of specific tools/packages in the Apache Hadoop/Spark Ecosystem?
    Yes -> Cloud Dataproc
    No -> Do you favor a hands-on/DevOps approach to operations, or a hands-off/serverless one?
      DevOps -> Cloud Dataproc
      Serverless -> Cloud Dataflow

Cloud Pub/Sub Fundamentals
  Fully managed messaging middleware service
  Allows secure and highly available messages between independent apps
  Works with both Google Cloud and external services
  Full range of communication:
    One to many 
    Many to one
    Many to many
  Both push and pull options
  Messages encrypted and HIPAA compliant
  Use cases: streaming data, event notifications, asynchronous workflows, etc.

Publisher==Message->Topic(->Message Storage)->Subscription->Message->Subscriber->Ack->Subscription

Cloud Datalab Fundamentals
  Interactive data analysis and machine learning environment
  Packaged as a container and runs in a VM instance
  Based on Jupyter notebooks
    Notebooks:
      Contain code, docs in markdown, and code results
      Code results can be text, image, JavaScript, or HTML
      Can be shared with team members
      Collections of cells containing code or markdown
create zone
datalab create laca-datalab
datalab connect --zone us-east1-b --port 8081 laca-datalab

Cloud Data Studio Fundamentals
  Interactive report and big data visualizer
  Creates dashboards, charts, and tables
  Connects to Cloud BigQuery, Cloud Spanner, Cloud SQL, & Cloud Storage
  Stores shareable files on Google Drive
  Basic process in three steps:
    Connect to data source
    Visualize data in report
    Share report

Cloud VPC(virtual private cloud) Fundamentals
  Private network within Google Cloud network infrastructure
  Adds network to Compute Engine, Kubernetes Engine, and App Engine(Flex)
  Global resource consisting of regional subnets, connected by WAN
  Cloud VPC includes:
    Firewalls
    Routes
    Forwarding rules
    Configuration of IP addresses, external or internal
  Two types of VPC creation: Auto mode and Custom mode
  Additional services include Shared VPC and Network Peering

Cloud Load Balancing Fundamentals
  Fully managed incoming traffic service
  Distributes traffic across several VM instances
  Benefits:
    Autoscaling(by policy, CPU utilization, or serving capacity)
    Supports heavy traffic
    Routes traffic to closest instances
    Detect and remove unhealthy instances
  Types of load balancing supported:
    Global external- HTTP/S, SSL, and TCP
    Regional external- TCP/UDP within a region
    Regional internal- between groups of instances in a region

Cloud CDN Fundamentals
  Accelerates delivery from Compute Engine and Cloud Storage
  Lowers network latency, offloads origin servers, and reduces serving costs
  Features include:
    Offers SSL at no additional cost
    Supports HTTP/1.0, HTTP/1.1, HTTP/2
    Supports cache invalidation
    Cach-to-cache filling supported
  General availability caches to 10GB, Large Object Caching(Beta) to 5TB
  Caching considerations:
    Caching is reactive
    Caches cannot be preloaded
    Once enabled, caching is automatic
    HTTP(S) load balancer is required

Cloud VPN Fundamentals
  Provides secure connections between on-premises and Cloud VPC
  Utilizes IPsec VPN gateways with encrypted/decrypted traffic
  Features include:
    Site-to-site VPN via simple topology or with redundancy
    Suppports Internet Key Exchange(IKE) v1 and v2 with shared secret
    Uses ESP in Tunnel mode with authentication for encryption
  Routing methods supported:
    Dynamic gateways using Border Gateway Protocol
    Policy-based routing
    Route-based VPN
  Best for low/medium traffic: 3 GB/second with direct peering; 1.5 without

Cloud Interconnect Fundamentals
  Provides higher-capacity connections between on-prem and Cloud VPC
  Dedicated Interconnect
    Direct physical connections with Google Network
    69 colocations facilities in 17 regions
    Highest bandwidth: 10 GB/sec per circuit (8 circuits max)
    Routing equipment in colocation facility required
  Partner Interconnect
    Connects to 3rd party service provider
    Many more connection possibilities
    Bandwidth from 50 MB/sec to 10 GB/sec
    Routing equipment not required
  Public internet bypassed
  VPN tunnels or NAT devices not needed
  Not encrypted - use app level encryption or own VPN

Cloud AI Fundamentals
  Collection of services and APIs designed to facilitate machine learning
  Includes hardware accelerators: TPUs (Tensor Flow Processing Units)
  Primary service: Cloud Machine Learning Engine (ML Engine)
    Training
      Trains computer models to recognize patterns in data
      Supports TensorFlow, scikit-learn, and XGBoost
    Prediction
      Online
        Real-time processing with fully managed ML engines
        No Docker container required & supports multiple frameworks
      Batch
        For asynchronous operations
        Scales to terabytes of data
  Data must be stored in accessible location, e.g., Cloud Storage

Cloud IoT Core Fundamentals
  Fully managed service for connecting and managing IoT devices
  Devices must be registered
  Works with both telemetry (event data) & device state data
  Receives data and sends to Cloud Pub/Sub topic
  Supports HTTP and MQTT protocols for communication
  Highly secure: 
    Each device uses JSON Web Tokens for public/private keys
    Supports RSA or Elliptic Curve algorithms to verify signatures
    Key rotation support
    Access to IoT core controlled by Cloud IAM roles and permissions
  Part of an IoT eco-system with Android Things and Google Beacon

Cloud Data Transfer Fundamentals 
  Range of options available for transferring data to Google Cloud
  Online Transfer
    Tools available: console upload, JSON REST API, gsutil
  Storage Transfer Service
    Imports online data to Cloud Storage
    Supports transfer of objects from AWS S3
  Transfer Appliance
    Physical device loaded on-prem and shipped to Google data center
    Single device can hold petabyte of data
    Far faster than online transfer for large amounts of data

