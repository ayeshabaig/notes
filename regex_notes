Regular Expressions

look like
\d{1,3}\.\d{1,3}.\d{1,3}\.\d{1,3}\
ipv4 address 1-3 # followed by a dot three times then a last 1-3 #s


examples of regex
globbing
ls *.txt
* - wildcard for any character
vim - uses regex for 
^ - move to front of a line
$ - move to end of line

\d{1,3} - 1-3 numerical digits (0-9)
\. - matches literal . - has to be escaped bc . is a regex metachar

where do we use regex
programming - Perl, Java, PHP
text processing - awk, sed
applications - InDesign

how to wrtie regex - text editor, command line
how to test - 	RegExr (regexr.com)
  		Regex101 (regex101.com)
		Regex Pal (regexpal.com)
download apps exist, but are distro specific

regex engine
numerous libraries
numerous languages
work in similar basic way
	return leftmost token
	takes many of the same tokens
2 basic algorithms
nfa nondeterministic finite automaton
dfa deterministic finite automation

nfa - perl, python, vim, sed
  can 'go back' in the regex
dfa - cant go back - grep awk
ip regex above will work in nfa engines, but not dfa

Standards for regex
IEEE POSIX Standards
  BRE- Basic Regular Expressions
  ERE- Extended Regular Expressions
  SRE- Simple Regular Expressions- not used anymore
ERE builds off BRE
ERE adds repitition, alternation, changes the () and {} 
DFA friendly
[:digit:] to match digit

PCRE- Perl Compatible Regular Expressions
used by Java, Python, .NET
Perl supports many Python implementations
NFA-minded

grep -P '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' ip 
  runs PCRE grep wtih the ip address pattern on file named 'ip'
grep -E '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' ip 
  runs ERE grep on ip which returns nothing bc \d is not supported
grep -E '[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]' ip
  returns the ips now


Literal Patterns
198\.51\.100\.23
198 - exact number given
\. - literal dot
curl some apache access logs
grep "198.51.100.23" access-logs
matches something but will also falsely match 198a51.100.23
so the dots need to be escaped
grep "198\.51\.100\.23"

Characters and Words
get processors file from github and put it into regexr.com

A-400                Enterprise                  Alpha Series                         $350.00
A-500                Enterprise                  Alpha Series                         $370.00
A-550                Enterprise                  Alpha Series                         $390.00
A-700                Enterprise                  Alpha Series                         $450.00
B-700                Enterprise                  Beta Series                          $500.00
B-800                Enterprise                  Beta Series                          $530.00
B-950                Enterprise                  Beta Series                          $600.00
D-440                Enterprise                  Delta Series                         $300.00
D-560                Enterprise                  Delta Series                         $350.00
D-780                Enterprise                  Delta Series                         $400.00
ET-770               Consumer                    Eta Series                           $300.00
ET-800               Consumer                    Eta Series                           $370.00
EP-300               Consumer                    Epsilon Series                       $100.00
EP-430a              Consumer                    Epsilon Series                       $150.00
EP-500               Consumer                    Epsilon Series                       $250.00
G-600                Enterprise                  Gamma Series                         $500.00
G-735                Enterprise                  Gamma Series                         $575.00
G-800                Enterprise                  Gamma Series                         $600.00
Gx-900               Enterprise                  Gamma Series                         $700.00
I-450q               Enterprise                  Gamma Series                         $400.00
I-500                Enterprise                  Gamma Series                         $450.00
Ix-900               Enterprise                  Gamma Series                         $750.00


/\w/g - matches any word, which includes numbers 
/[A-D]\g - matches any uppercase letter between A and D
/[ABD]\g - matches only A, B, or D
/\W/g - matches any nonword
/[ABD]\W/g - matches an A, B, or D followed by a nonword
/[ABD]\W\w\w\w/g - 
  [ABD] - match a character that is either A, B, or D (uppercase)
  \W - match a non-word character (NOT A-Z, a-z, 0-9)
  \w - match a word character (A-Z, a-z, 0-9); each \w is an individual token

Digits
\d - digit 0-9, each \d is an individual token
\D - not a digit
- - used outside of a range, the dash has no special meaning and can be used as a literal
/[ABD]-[6-9]\d\d/g 
  [6-9] - match any number between 6 and 9

Whitespace
sed -i -r 's/\s\s+/\t/g' hostfile
sed -i -r -> invoke sed to process a file
's/\s\s+/\t/g' -> sed script to convert excess spaces to tabs
  /'s are namespace separators for the sed script: s/find/replace/g
  g - tells sed to work globally; i.e., continue after the first match

sample /etc/hosts file:
127.0.0.1	localhost

# demo environment

192.0.2.1	master
192.0.2.2       master2
192.0.2.32  db
192.0.2.100 		web1
192.0.2.110     web2

# internal

10.0.2.304  confluence
10.0.10.2	doc-test-servers
10.0.100.24     dev

\s - matches any whitespace - spaces, tabs, line breaks, carriage returns
\S - matches any non-whitespace
\t - tab
\n - newline
\r - carriage return
\v - vertical space
\s\s - any kind of whitespace, each \s is a single token
+ - repeat previous token one or more times
sed -i -r -> -i = edit and replace the file -r = use ERE

Unicode
not all regex engines support unicode
can match on the character directly
\u00e9 - unicode e with accent
can also match on unicode category
\b\pL+\b - match a string made of the letter Unicode category
regex101.com - supports unicode regex
unicode-table.com - has unicode table
pcre - doesn't support unicode
javascript - does support unicode
hostfile -> targeted file to run script against

